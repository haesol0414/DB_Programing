DB_Programing
: 데이터베이스 프로그래밍 과목 정리 및
  DAsP 자격증 시험 대비




**** 1 Week ***


	< DA#5 기본 사용법 >

	1. 모델 만들기 : 가장 위 왼쪽 초록색 아이콘 -> 새로만들기 -> 디폴트 : 논리 및 물리모델링 -> 모델명 입력 -> DMAS 선택 (oracle)

	2. 엔티티 만들기 : 툴 박스에서 엔티티 클릭 -> 화면에서 더블 클릭 해서 편집창 열기 -> 
	엔티티 명과 속성 설정(아래 추가 버튼으로 엔티티 추가 가능, 실질 식별자와 not noll에 모두 체크를 하면 Primary Key가 됨.)

	3. 서브타입 설정 : 엔티티 편집창에서 서브타입으로 설정할 엔티티 선택 후 서브타입 버튼 클릭 -> 서브타입명 설정 -> 
	화면에서 서브타입 더블 클릭 -> 속성명과 속성 설정


	** 각 엔티티 속성 아이콘별 의미
		# : 실질 식별자(=주 식별자) (PK)
		(#) : 보조 식별자(=대체 식별자) (보조 식별자로 설정하면 인덱스를 통해 접근 가능한 애트리뷰트가 됨)
		* : not null 속성이 있음
		o : 기본
		$ : 상속이 불가능한 키




	< 데이터 모델링 >


	** 업무 시스템 구축의 흐름
	- 업무 시스템은 데이터 관점의 축과 어플리케이션 관점의 축으로 나뉜다.
	- 업무를 프로세스 단위로 나눠서 구조화 시키는 작업을 프로세스 모델링이라 한다.
	- 하나의 프로세스는 하나의 어플리케이션으로 이해.
	- 이 둘 사이의 검증을 거쳐 상관모델링이라는 결과를 도출한다. (CRUD 매트릭스)
	- 1단계 분석 : D=데이터 모델링 			AP=프로세스 모델링
	- 2단계 설계 : D=물리DB 설계    		AP=어플리케이션 설계
	- 3단계 개발 : D=DB구축,변경,관리 	AP=어플리케이션 개발
	- 4단계 테스트 : D=DB 튜닝 				AP=어플리케이션 테스트
	- 5단계 전환/이행 : D=DB전환. 			AP=어플리케이션 설치


	** 데이터 모델링
	- 데이터 모델링이란? : 정보 시스템을 구축하기 위해 어떤 데이터가 존재하는지, 업무가 필요로 하는 정보는 무엇인지를 분석하는 방법
	- 데이터 모델링은 누가? : 프로젝트 엔지니어, 시스템 엔지니어(SE), 업무 관리자(BA), DBA, DA, MODERLER, 현업 전문가 등이 참여한다.
	- 물리 모델링을 통해 DDL Script를 생성한다. ( = SQL로 테이블을 생성하는 명령어를 만들어 주는 코드 )
	- 3차원 업무 -> 2차원 그림(데이터 모델링) -> 1차원 코드(DDL Script)


	** 데이터 모델링의 기본 용어
	  *개념 : *타입/클래스 : *어커런스/인스턴스
	 어떤 것 : 엔티티타입 : 엔티티
	 어떤 것 간의 관계 : 관계 : 패어링
	 어떤 것의 성격 : 속성 : 속성값


	** 엔티티 타입과 엔티티
	- 엔티티 타입은 업무에 필요하고 유용한 정보를 저장하고 관리하기 위한 것으로
	영속적으로 존재하는 단위이다 (ex. 강의실, 과목, 학생, 강사 등)
	- 엔티티 타입 하나에 대해서는 여러개의 엔티티가 존재한다.
	- 엔티티 타입의 분류
	1. 유무형에 따라 : 유형(사원, 물품) / 개념(조직, 장소) / 사건(주문, 청구)
	2. 발생 시점에 따라 : 기본(사원, 부서) / 중심(접수, 계약) / 행위(주문내역, 계약진행)
	꼭 구분할 필요는 없지만, 엔티티 타입 분류를 명확히 하면 업무 분석에 효과적이다.


	** 관계
	- 2개 이상의 개체를 연결한 집단화(aggregation)로 이루어짐.
	- 데이터 모델링에서 새발표기법을 이용해 표현할 수 있다.
	- 1:1 / 1:N / N:M 관계가 있다.
	- 관계를 읽는 방법 : 주는쪽 참여 수 / 주는쪽 엔티티타입 명 / 받는쪽 참여 수 / 받는쪽 엔티티타입 명 / 관계명 (ex. 하나의 / 부서 / 여러명의 / 사원을 / 포함한다. ex2. 하나의 / 사원은 / 하나의 / 부서에만 / 소속된다. ) 
	- 반드시 ~해야한다. 와 ~할 수있다. 의 관계는 다르다. 필수로(하나도 빠짐 없이)관계에 존재해야 하는 경우는 새발 표기법에서 o 표기를 붙이지 않아야 한다. 
	- (o표기는 option, 즉 선택관계(필수가 아닌 관계)라고 생각하면 쉽다.)


	** 속성 명칭 부여 방법
	- 해당 업무에서 사용하는 이름을 부여한다.
	- 서술식 속성명은 사용하지 않는다.(명사로 표기한다.)
	- 약어 사용은 가급적 제한한다.
	- 엔티티타입에서 유일하게 식별 가능하도록 지정한다.




	< 데이터 분석 및 데이터 모델링 >


	** 업무 시스템 구축의 단계 (데이터 모델링의 관계)
	1. 엔티티 타입 정의
	2. 엔티티 타입과 엔티티 간의 관계 정의
	3. 식별자 정의 ( 주식별자, 보조식별자, 외부식별자, 식별자업무규칙 )
	4. 세부사항 정의
	5. 통합화
	6. 데이터 모델 검증


	** 관계형 데이터베이스 모델링의 3요소
	- 엔티티, 속성, 관계
	- 속성이란 : 개체 또는 관계의 기초적인 성질을 나타냄. 엔티티를 식별하는 고유한 성질.


	** 이상적인 데이터 모델
	- 데이터 규칙이 데이터에 존재한다. (모델만을 보고도 업무를 어느정도는 파악할 수 있도록.)
	- 데이터를 사용하는 모든 관계자에게 정확한 업무 규칙을 제공.
	- 즉, 업무 규칙을 정확하게 표현하는 ERD가 이상적이라고 할 수 있다.


	** 슈퍼타입과 서브타입
	서브타입1, 서브타입2는 슈퍼타입에 의해서는 합집합이지만, 
	서브타입1과 서브타입2 서로는 공집합이다.
	ex. 슈퍼타입 = 고객
		서브타입1 = 개인고객, 서브타입2 = 법인고객


	** 엔티티 타입 정의
	- 업무 기술서, 장표, 인터뷰 정리문서 등에서 명사를 구분. (명사를 모두 도출)
	- 개념이 불분명한 것과 광범위한 것은 제거한다.
	- 엔티티 타입의 특성이거나 속성이 될 값은 제거한다.
	- 포괄적인 업무 프로세스(업무 과정)에 해당되는 명사는 제거한다.
	- 중복되는 명사는 제거한다.
	- 누락된 엔티티 타입이 존재하는지 유추해본다.








**** 2 Week ***



	** 수집된 엔티티의 분류 (우선 적용 대상)
	- Key Entity (사원, 상품, 부서 ... )
	: 태초부터 창조된 실체
		잘 변하지 않는 것
		자신의 부모를 갖지 아니함
		데이터 발생의 주체나 목적어
	- Main Entity (카드, 계약, 공사 ... )
	: 부모로부터 태어난 실체지만 하위에 자손을 거느린 실체
	  많은 자손을 가짐
	  데이터를 발생시키는 주체
	- Action Entity (카드 이름, 계약 변경, 공사 내역 ... )
	: 실제 발생하는 업무
		반드시 부모를 가짐
		많은 부모를 가짐
		자주 변경, 지속적 증가


	** 모델링의 기초가 되는 엔티티타입 정의서
	- 엔티티타입 명 / 엔티티타입 설명 / 동의어와 유의어 / 엔티티타입 구분 / 관련속성 / 비고
	란으로 구성되어져 있다.


	** 엔티티타입의 관계 정의하는 법
	- 1. 업무 기술서, 장표, 인터뷰 정리문서 등에서 동사를 구분한다
	- 2. 도출된 엔티티 타입과 관계를 이용하여 관계정의서를 작성하도록 한다
	- 3. 고객에게 질문하여 관계에 대해 더 세분화하고 정확하게 도출하는 작업을 한다
	- 4. 데이터 모델링 툴이나 칠판, 포트트잇을 이용하여 직접 모델을 그려본다
	- 5. 고객과 질문하고 협의하여 모델을 검토하는 시간을 갖는다


	** 관계 정의서
	- 기준 엔티티타입/ 관계 형태(방향, 참여도, 참여방법) / 참여 방법(필수or선택) / 관련 엔티티타입
	란으로 구성되어 있다.
	- 비 식별관계와 식별관계의 차이 : 관련 테이블의 FK가 기준 테이블에서 PK란에 있는 경우는 식별관계이고,
	그렇지 않은 경우는 비 식별관계이다. (비 식별관계에서는 기준 테이블에서 일반 속성으로 존재한다.)
	- 식별 관계에 있는 경우는 엔티티 무결성을 관리하기 어려워진다.
	- 관계를 이어주는 선이 실선인 경우는 필수적(무조건 1), 점선인 경우는 선택적(0, 1)이라고 보면 된다.


	** 식별자(Identifier) 정의
	- 엔티티 타입과 관계를 정의하고 식별자를 정의해야 한다.
	- 식별자는 엔티티타입 내에서 엔티티들을 구분할 수 있는 구분자이다.
	- 정의해야할 식별자는 주식별자, 부식별자, 외부식별자가 있다.
	- 주식별자 : PK / 보조식별자 : AK(대체키-주식별자를 사용할 수 없을 때 대체가능한 키) / 외부식별자 : FK


	** 속성 정의
	- 속성을 발견하는 작업은 개발 이전까지 지속적으로 진행되어야 하므로
	데이터 모델링 단계에서 완벽하게 속성을 찾으려고 애쓰지 않아도 된다.
	- 업무적으로 관리해야 할 속성이 있음에도 불구하고 도출된 엔티티타입이 존재하지 않을 경우는 새로운 엔티티타입 생성을 만들어줄 필요도 있다.
	- 한 속성값은 한 시점에 한 개의 값만을 가질 수 있다.
	- 한 속성이 시간에 따라 여러 개의 값을 가지며 그 값을 해당 업무에서 관리해야 할 필요가 있으면 새로운 엔티티타입을 생성한다.  (ex. 이력 or 내역을 관리할 때)
	- => 다중 값에 대한 데이터모델링 (고객 - 고객 번호(PK), 성명, 집주소, 전화번호 ... / 고객방문 - 고객번호(FK), 방문일시, 방문내용)
	

	** 속성의 3가지 분류
  - 1분류 기본 속성 (BASIC) : 업무상 수집된 기본 속성
  - 2분류 설계 속성 (DESIGNED) : 업무에 필요한 정보를 주기위해 시스템에서 고안한 속성 (코드, 일련번호, 학번, 사원번호, 주민번호 등)
  - 3분류 파생된 속성 (DERIVED) : 다른 속성에 의해 계산되거나 영향을 받아 생성된 속성 (금액총합, 이자 등)


  ** 배타 속성 (Exclusive 속성)
  - 서브 타입 구분을 기준으로 베타 속성을 정의할 수 있다.
  - DA#5에서 배타 속성 정의하는 법
  : 정의할 속성을 선택 -> Inclusive를 False로 설정 -> Exclusive 속성은 회색으로 표시된다. -> 서브 타입 속성을 선택하여 배타 속성쪽으로 드래그하여 박스 표시가 보일 때 놓는다.

 
 ** 식별관계 / 비식별관계
 - 식별 관계 : 부모 엔티티의 식별자(UID)가 자식 엔티티의 식별자로 상속 되는 것
 - 비 식별 관계 : 부모 엔티티의 식별자(UID)가 자식 엔티티의 일반 속성으로 상속 되는 것
 - UID : Unique IDentifier


 ** 식별자의 분류
 - 본질 식별자 : 집합의 본질을 명확하게 설명할 수 있는 의미상의 주어 (ex. 주민등록번호)
 - 인조 식별자 : 인조 속성을 영입하여 공식적인 식별자로 인정하는 식별자 (ex. 학번, 사번)
 - 실질 식별자(주 식별자) : 인스턴스를 식별하기 위해 공식적으로 부여된 식별자(PK), 인조 식별자나 본질 식별자 모두 주 식별자가 될 수 있다.
 - 보조 식별자(대체 식별자) : 원래의 주 식별자를 대체할 수 있는 또 다른 속성(들), 검색 속도를 올려줄 수 있는 '인덱스 테이블'을 위한 식별자. (ex. 학번을 잊었을 때 주민등록번호)
 - 후보 식별자 : 각 인스턴스를 유일하게 식별할 수 있는 속성(들), 후보 식별자 안에 본질식별자나 인조식별자 등이 모두 포함.





*** 3 Week ***






